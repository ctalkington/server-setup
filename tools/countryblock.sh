#!/bin/bash
# IPTables Country Block Script v1.4.5
# (c) 2013 Chris Talkington <chris@talkingontech.com>

# block all traffic from ISO code (eg ch for China)
ISO="af cn hk kr pe pk sg tw vn"

# provider (ipinfodb or ipdeny)
DLPROVIDER="ipdeny"

# allowed ports
ALLOWPORTS=""

# log drops?
LOGDROP=false

# are we debugging
DEBUGME=false

# are we just testing
DRYRUNME=false

# set PATHs
IPTBIN=/sbin/iptables
IPTRESTOREBIN=/sbin/iptables-restore
WGETBIN=/usr/bin/wget
EGREPBIN=/bin/egrep
FINDBIN=/usr/bin/find

# save zones here
ZONEROOTDIR=/tmp/countryblock

# cache zones for this long
ZONECACHEDAY=3

# iptables chain used for rules
CBCHAIN="countryblock"

# iptables config file
CBRESTORE="/etc/countryblock.rules"

# where to get rules from
DLROOTIPINFODB="http://ipinfodb.com/country_query.php"
DLROOTIPDENY="http://www.ipdeny.com/ipblocks/data/countries"

function USAGE() {
cat << EOF
usage: $0 options

This script grabs a list of country IPs in CIDR format from database provider
and then builds sets of octet optimized DROP rules for iptables.

OPTIONS:
  -h    Show this message
  -a    Allow specific ports through (comma seperated)
  -c    Countries to block (ISO; lowercase, space seperated)
  -d    Debug mode
  -l    Log DROPs
  -p    List Provider (ipdeny or ipinfodb) default: ipdeny
  -t    Dryrun mode
  -u    Force zone cache update
EOF
}

while getopts "ha:c:dlp:tu" opt; do
  case $opt in
    h)
      USAGE
      exit 1
      ;;
    a)
      ALLOWPORTS="$OPTARG"
      ;;
    c)
      ISO="$OPTARG"
      ;;
    d)
      DEBUGME=true
      ;;
    l)
      LOGDROP=true
      ;;
    p)
      DLPROVIDER="$OPTARG"
      ;;
    t)
      DRYRUNME=true
      ;;
    u)
      ZONECACHEDAY=0
      ;;
    \?)
      USAGE
      exit
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

function ERROR() {
  echo && echo "[error] $@"
  exit 1
}

function NOTICE() {
  echo && echo "[notice] $@"
}

function DEBUG() {
  if [ $DEBUGME = true ]; then
    echo && echo $@
  fi
}

function RUNCMD() {
  DEBUG $@

  if [ $DRYRUNME = false ]; then
    $@
  fi
}

function FORCERUNCMD() {
  DEBUG $@
  $@
}

function IPTCLEANUP() {
  RUNCMD $IPTBIN -L $CBCHAIN > /dev/null 2>&1

  if [ $? = 0 ] ; then
    RUNCMD $IPTBIN -D INPUT -j $CBCHAIN
    RUNCMD $IPTBIN -D OUTPUT -j $CBCHAIN
    RUNCMD $IPTBIN -D FORWARD -j $CBCHAIN
  fi

  RUNCMD $IPTBIN -F $CBCHAIN
  RUNCMD $IPTBIN -X $CBCHAIN

  for i in `$IPTBIN -L -n | grep Chain | cut -f 2 -d ' ' | grep '\-$CBCHAIN'`; do
    RUNCMD $IPTBIN -F ${i}
    RUNCMD $IPTBIN -X ${i}
  done
}

function UPDATEZONECACHE() {
  for c in $ISO; do
    tDB="$ZONEROOTDIR/$DLPROVIDER-$c.zone"

    if [ $DLPROVIDER == "ipdeny" ]; then
      DLZONECMD="$WGETBIN -O $tDB $DLROOTIPDENY/$c.zone"
    elif [ $DLPROVIDER == "ipinfodb" ]; then
      DLZONECMD="$WGETBIN -O $tDB $DLROOTIPINFODB?country=$c"
    fi

    if [ $ZONECACHEDAY = 0 ]; then
      CACHECLEANCMD="$FINDBIN $tDB -type f -exec rm -fv {} \;"
    else
      CACHECLEANCMD="$FINDBIN $tDB -type f -ctime +$ZONECACHEDAY -exec rm -fv {} \;"
    fi

    FORCERUNCMD $CACHECLEANCMD

    if [ -f $tDB ]; then
      NOTICE "Using existing $c zone cache"
    else
      NOTICE "Creating $c zone cache"
      FORCERUNCMD $DLZONECMD
    fi
  done
}

function CREATEIPTCONFIG() {
  printf "# Generated by %s on " $0 > ${CBRESTORE}
  printf "%s " `date` >> ${CBRESTORE}
  printf "\n*filter\n" >> ${CBRESTORE}

  printf ":$CBCHAIN - [0:0]\n" >> ${CBRESTORE}
  printf "%s INPUT -j $CBCHAIN\n" "-I" > ${CBRESTORE}.tmp
  printf "%s OUTPUT -j $CBCHAIN\n" "-I"  >> ${CBRESTORE}.tmp
  printf "%s FORWARD -j $CBCHAIN\n" "-I" >> ${CBRESTORE}.tmp

  printf "%s $CBCHAIN -m state --state RELATED,ESTABLISHED -j ACCEPT\n" "-I">> ${CBRESTORE}.tmp

  if [ "Z${ALLOWPORTS}" = "Z" ] ; then
    NOTICE "Blocking all traffic from countries - no ports allowed"
  else
    printf "%s $CBCHAIN -p tcp -m multiport --dports ${ALLOWPORTS} -j RETURN\n" "-I">> ${CBRESTORE}.tmp
  fi

  for c in $ISO; do
    tDB="$ZONEROOTDIR/$DLPROVIDER-$c.zone"

    LOGDROPMSG="iptables: $c-countryblock: "
    CBCHAINDROP="$c-$CBCHAIN-drop"

    printf ":${CBCHAINDROP} - [0:0]\n" >> ${CBRESTORE}

    if [ $LOGDROP = true]; then
      printf "%s ${CBCHAINDROP} -j LOG --log-prefix \"$LOGDROPMSG\"\n" "-A" >> ${CBRESTORE}.tmp
    fi

    printf "%s ${CBCHAINDROP} -j DROP\n" "-A" >> ${CBRESTORE}.tmp

    if [ -f $tDB ]; then
      BADIPS=$($EGREPBIN -v "^#|^$" $tDB)

      for ipblock in $BADIPS; do
        OCTET=`echo $ipblock | cut -f 1 -d '.'`
        CHAINTEST=`grep -c :${OCTET}-${CBCHAIN} ${CBRESTORE}`

        if [ $CHAINTEST = 0 ] ; then
          NOTICE "Creating chain for octet $OCTET"
          printf ":$OCTET-$CBCHAIN - [0:0]\n" >> ${CBRESTORE}
          sip=${OCTET}.0.0.0/8

          printf "%s $CBCHAIN -s ${sip} -j $OCTET-$CBCHAIN\n" "-A" >> ${CBRESTORE}.tmp
        fi

        printf "  Adding rule for %s to chain for octet %s\n" ${ipblock} ${OCTET}
        printf "%s $OCTET-$CBCHAIN -s $ipblock -j ${CBCHAINDROP}\n" "-A" >> ${CBRESTORE}.tmp

        IPCOUNTISO=$(($IPCOUNTISO + 1))
      done
    else
      NOTICE "Missing zone cache file: $tDB"
    fi
  done

  cat ${CBRESTORE}.tmp >> ${CBRESTORE} && rm -f ${CBRESTORE}.tmp
  printf "COMMIT\n# Completed on " >> ${CBRESTORE}
  printf "%s " `date` >> ${CBRESTORE}
  printf "\n" >> ${CBRESTORE}
}

function IPTLOADCONFIG() {
  CREATEIPTCONFIG
  RUNCMD ${IPTRESTOREBIN} -n ${CBRESTORE}

  NOTICE "Country block instituted for: $ISO"
}

if [ $DRYRUNME = true ]; then
  NOTICE "Dryrun active. No iptables commands will be run."
fi

# lock down permissions
umask 077

if [ ! -n "$ISO" ]; then
  ERROR "Invalid country list"
fi

if [[ $DLPROVIDER -ne "ipdeny" || $DLPROVIDER -ne "ipinfodb" ]]; then
  ERROR "Invalid List Provider: $DLPROVIDER"
fi

if [ ! -n "$ZONEROOTDIR" ]; then
  ERROR "Invalid zone directory"
fi

# create directory if needed
mkdir -p -v $ZONEROOTDIR
if [ ! -d $ZONEROOTDIR ]; then
  ERROR "Invalid directory: $ZONEROOTDIR"
fi

# actually do something
IPTCLEANUP
UPDATEZONECACHE
IPTLOADCONFIG

if [ $DRYRUNME = true ]; then
  NOTICE "Dryrun active. No iptables commands were run."
fi

exit 0